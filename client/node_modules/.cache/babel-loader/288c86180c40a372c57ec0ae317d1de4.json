{"ast":null,"code":"var _jsxFileName = \"/Users/codeclan_student/Desktop/practice_projects/recipe_app/client/src/containers/RecipeSection/CreateRecipe/RecipeForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Request from '../../../helpers/request';\nimport IngredientSection from './RecipeFormIngredientSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecipeForm = _ref => {\n  _s();\n\n  let {\n    onCreate,\n    onUpdate,\n    ingredients\n  } = _ref;\n  const [meals, setMeals] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [measurementTypes, setMeasurementTypes] = useState([]);\n  const [recipe, setRecipe] = useState({// name: \"\",\n    // meal: \"\",\n    // calories: 0,\n    // portions: 0,\n    // preparedIngredients: [],\n    // cooking_time: 0,\n    // instructions: [],\n    // tags: []\n  });\n  const [ingredient, setIngredient] = useState({});\n  const [ingredientList, setIngredientList] = useState([]); // const [preparedIngredient, setPreparedIngredient] = useState({\n  // ingredient: {},\n  // measurement: 0,\n  // measurementType: \"\",\n  // preparation: \"\",\n  // caloriesPerPreparedIngredient: 0\n  // });\n  // const [preparedIngredientsList, setPreparedIngredientsList] = useState([]);\n\n  const [ingredientFormValues, setIngredientFormValues] = useState([{}]); // const [toggleForm, setToggleForm] = useState(false);\n  // const [toggleButton, setToggleButton] = useState(false);\n\n  const [recipes, setRecipes] = useState([]); // const [prepared_ingredients, setPrepared_ingredients] = useState([]);\n\n  const [id, setId] = useState(null);\n\n  const getRecipes = () => {\n    Request.get('http://localhost:8080/recipes/').then(recipeData => findRecipeByName(recipeData));\n  };\n\n  const findRecipeByName = recipeList => {\n    for (let item of recipeList) {\n      if (item.name === recipe.name) {\n        setRecipe(item);\n      }\n    }\n  };\n\n  const getRecipeId = () => {\n    Request.get('http://localhost:8080/recipes/').then(recipeData => findRecipeId(recipeData));\n  };\n\n  const findRecipeId = recipeList => {\n    let id = null;\n\n    for (let item of recipeList) {\n      if (item.name === recipe.name) {\n        id = item.id;\n      }\n    }\n\n    setId(id);\n  }; // const getPreparedIngredients = () => {\n  //     Request.get('http://localhost:8080/prepared_ingredients/')\n  //         .then(data => findByName(data))\n  // }\n  // const findByName = (list) => {\n  //     const newList = []\n  //     for (let item of list) {\n  //         for (let element of preparedIngredientsList) {\n  //             if (item.name === element.name)\n  //                 newList.push(item)\n  //         }\n  //     }\n  //     setPreparedIngredientsList(newList);\n  // }\n  // fetch eNums from backend\n\n\n  useEffect(() => {\n    getMeals();\n  }, []);\n  useEffect(() => {\n    getTags();\n  }, []);\n  useEffect(() => {\n    getMeasurementTypes();\n  }, []);\n\n  const getMeals = () => {\n    Request.get('http://localhost:8080/meal').then(mealData => setMeals(mealData));\n  };\n\n  const getTags = () => {\n    Request.get('http://localhost:8080/tags').then(tagData => setTags(tagData));\n  };\n\n  const getMeasurementTypes = () => {\n    Request.get('http://localhost:8080/measurements').then(measurementData => setMeasurementTypes(measurementData));\n  }; // handle form events\n\n\n  const handleChange = event => {\n    let propertyName = event.target.name;\n    let copiedRecipe = { ...recipe\n    };\n    copiedRecipe[propertyName] = event.target.value;\n    setRecipe(copiedRecipe);\n  };\n\n  const handleMeal = function (event) {\n    const index = parseInt(event.target.value);\n    const selectedMeal = meals[index];\n    let copiedRecipe = { ...recipe\n    };\n    copiedRecipe['meal'] = selectedMeal;\n    setRecipe(copiedRecipe);\n  };\n\n  const handleTags = function (event) {\n    const index = parseInt(event.target.value);\n    const selectedTag = tags[index];\n    let copiedRecipe = { ...recipe\n    };\n    copiedRecipe['tags'] = [];\n    copiedRecipe['tags'].push(selectedTag);\n    setRecipe(copiedRecipe);\n  };\n\n  const handleInstructions = event => {\n    let copiedRecipe = { ...recipe\n    };\n    copiedRecipe['instructions'] = [];\n    copiedRecipe['instructions'].push(event.target.value);\n    setRecipe(copiedRecipe);\n  }; // submitting prepared ingredients\n  // const handlePreparedIngredientChange = (index, event) => {\n  //     let data = [...ingredientFormValues];\n  //     data[index][event.target.name] = event.target.value\n  //     setPreparedIngredient(data);\n  //     const copiedList = preparedIngredientsList;\n  //     copiedList[index] = data;\n  //     setPreparedIngredientsList(copiedList);\n  // }\n  // const handleIngredients = function (index, event) {\n  //     const i = parseInt(event.target.value)\n  //     const selectedIngredient = ingredients[i]\n  //     let data = [...ingredientFormValues];\n  //     data[index][event.target.name] = selectedIngredient\n  //     setPreparedIngredient(data)\n  //     const copiedList = preparedIngredientsList;\n  //     copiedList[index] = data;\n  //     setPreparedIngredientsList(copiedList);\n  // }\n  // const handleMeasurementType = function (index, event) {\n  //     const i = parseInt(event.target.value)\n  //     const selectedType = measurementTypes[i]\n  //     let data = [...ingredientFormValues];\n  //     data[index][event.target.name] = selectedType\n  //     setPreparedIngredient(data)\n  //     const copiedList = preparedIngredientsList;\n  //     copiedList[index] = data;\n  //     setPreparedIngredientsList(copiedList);\n  // }\n  // const handleAllPreparedIngredientsSubmit = function (event) {\n  //     event.preventDefault();\n  //     // let copiedRecipe = { ...recipe };\n  //     // copiedRecipe['prepared_ingredients'] = [];\n  //     ingredientFormValues.forEach((element) => {\n  //         // copiedRecipe.prepared_ingredients.push(element);\n  //         onPreparedIngredient(element);\n  //     })\n  //     // getPreparedIngredients();\n  //     // copiedRecipe.prepared_ingredients = preparedIngredientsList;\n  //     // setRecipe(copiedRecipe);\n  // }\n\n\n  const handleIngredientSelect = function (index, event) {\n    const i = parseInt(event.target.value);\n    const selectedIngredient = ingredients[i];\n    let data = [...ingredientFormValues];\n    data[index][event.target.name] = selectedIngredient;\n    setIngredient(data);\n    const copiedList = ingredientList;\n    copiedList[index] = data;\n    setIngredientList(copiedList);\n  };\n\n  const handleIngredientsSubmit = function (event) {\n    event.preventDefault();\n    let copiedRecipe = { ...recipe\n    };\n    copiedRecipe['ingredients'] = [];\n    ingredientList.forEach(element => {\n      copiedRecipe.ingredients.push(element);\n    }); // copiedRecipe.ingredients = ingredientList;\n\n    setRecipe(copiedRecipe);\n    console.log(recipe);\n  }; // add more ingredients\n\n\n  const addAnotherIngredient = function () {\n    setIngredientFormValues([...ingredientFormValues, {}]);\n  }; // create recipe\n\n\n  const handleSubmit = function (event) {\n    event.preventDefault(); // onUpdate(recipe, id);\n\n    onCreate(recipe);\n    console.log(recipe);\n  };\n\n  const createRecipe = function (event) {\n    event.preventDefault(); // onCreate(recipe);\n    // setToggleButton(true);\n  };\n\n  const mealOptions = meals.map((meal, index) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: index,\n      children: meal\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 16\n    }, this);\n  });\n  const tagsOptions = tags.map((tag, index) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: index,\n      children: tag\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 16\n    }, this);\n  });\n  const ingredientsOptions = ingredients.map((ingredient, index) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: index,\n      children: ingredient.name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 16\n    }, this);\n  });\n  const measurementTypeOptions = measurementTypes.map((measurement_type, index) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: index,\n      children: measurement_type\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recipe-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Recipe name\",\n      name: \"name\",\n      onChange: handleChange,\n      defaultValue: recipe.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"type\",\n      onChange: handleMeal,\n      defaultValue: \"select-meal\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        disabled: true,\n        value: \"select-meal\",\n        children: \"Select a meal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 21\n      }, this), mealOptions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Number of portions\",\n      name: \"portions\",\n      onChange: handleChange,\n      defaultValue: recipe.portions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      step: \"0.01\",\n      placeholder: \"Cooking time\",\n      name: \"cooking_time\",\n      onChange: handleChange,\n      defaultValue: recipe.cooking_time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createRecipe,\n      children: \"Create recipe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Add ingredients:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleIngredientsSubmit,\n      children: [ingredientFormValues.map((element, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"ingredient\",\n            onChange: event => handleIngredientSelect(index, event),\n            defaultValue: \"select-ingredient\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              disabled: true,\n              value: \"select-ingredient\",\n              children: \"Select an ingredient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 33\n            }, this), ingredientsOptions]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addAnotherIngredient,\n        children: \"Add another ingredient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit ingredients\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Add tag:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"tags\",\n        onChange: handleTags,\n        defaultValue: \"select-tag\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          value: \"select-tag\",\n          children: \"Select a tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }, this), tagsOptions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Add instruction:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Instructions\",\n        name: \"instructions\",\n        onChange: handleInstructions,\n        defaultValue: recipe.instructions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Create Recipe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RecipeForm, \"VFTGYdT5J0KrFw5Y6xyKtZJmV4M=\");\n\n_c = RecipeForm;\nexport default RecipeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeForm\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Request","IngredientSection","RecipeForm","onCreate","onUpdate","ingredients","meals","setMeals","tags","setTags","measurementTypes","setMeasurementTypes","recipe","setRecipe","ingredient","setIngredient","ingredientList","setIngredientList","ingredientFormValues","setIngredientFormValues","recipes","setRecipes","id","setId","getRecipes","get","then","recipeData","findRecipeByName","recipeList","item","name","getRecipeId","findRecipeId","getMeals","getTags","getMeasurementTypes","mealData","tagData","measurementData","handleChange","event","propertyName","target","copiedRecipe","value","handleMeal","index","parseInt","selectedMeal","handleTags","selectedTag","push","handleInstructions","handleIngredientSelect","i","selectedIngredient","data","copiedList","handleIngredientsSubmit","preventDefault","forEach","element","console","log","addAnotherIngredient","handleSubmit","createRecipe","mealOptions","map","meal","tagsOptions","tag","ingredientsOptions","measurementTypeOptions","measurement_type","portions","cooking_time","instructions"],"sources":["/Users/codeclan_student/Desktop/practice_projects/recipe_app/client/src/containers/RecipeSection/CreateRecipe/RecipeForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Request from '../../../helpers/request';\nimport IngredientSection from './RecipeFormIngredientSection';\n\nconst RecipeForm = ({ onCreate, onUpdate, ingredients }) => {\n\n    const [meals, setMeals] = useState([]);\n    const [tags, setTags] = useState([]);\n    const [measurementTypes, setMeasurementTypes] = useState([]);\n\n    const [recipe, setRecipe] = useState({\n        // name: \"\",\n        // meal: \"\",\n        // calories: 0,\n        // portions: 0,\n        // preparedIngredients: [],\n        // cooking_time: 0,\n        // instructions: [],\n        // tags: []\n    });\n    const [ingredient, setIngredient] = useState({});\n    const [ingredientList, setIngredientList] = useState([]);\n\n    // const [preparedIngredient, setPreparedIngredient] = useState({\n        // ingredient: {},\n        // measurement: 0,\n        // measurementType: \"\",\n        // preparation: \"\",\n        // caloriesPerPreparedIngredient: 0\n    // });\n    // const [preparedIngredientsList, setPreparedIngredientsList] = useState([]);\n    const [ingredientFormValues, setIngredientFormValues] = useState([{}]);\n\n    // const [toggleForm, setToggleForm] = useState(false);\n    // const [toggleButton, setToggleButton] = useState(false);\n\n    const [recipes, setRecipes] = useState([]);\n    // const [prepared_ingredients, setPrepared_ingredients] = useState([]);\n    const [id, setId] = useState(null);\n\n    const getRecipes = () => {\n        Request.get('http://localhost:8080/recipes/')\n        .then(recipeData => findRecipeByName(recipeData))\n        \n    }\n\n    const findRecipeByName = (recipeList) => {\n    for (let item of recipeList) {\n        if (item.name === recipe.name) {\n            setRecipe(item);\n            }\n        }\n    }\n\n    const getRecipeId = () => {\n        Request.get('http://localhost:8080/recipes/')\n            .then(recipeData => findRecipeId(recipeData))\n    }\n\n    const findRecipeId = (recipeList) => {\n        let id = null;\n        for (let item of recipeList) {\n            if (item.name === recipe.name) {\n                id = item.id\n            }\n        }\n        setId(id);\n    }\n\n    // const getPreparedIngredients = () => {\n    //     Request.get('http://localhost:8080/prepared_ingredients/')\n    //         .then(data => findByName(data))\n    // }\n\n    // const findByName = (list) => {\n    //     const newList = []\n    //     for (let item of list) {\n    //         for (let element of preparedIngredientsList) {\n    //             if (item.name === element.name)\n    //                 newList.push(item)\n    //         }\n    //     }\n    //     setPreparedIngredientsList(newList);\n    // }\n\n\n    // fetch eNums from backend\n    useEffect(() => {\n        getMeals();\n    }, [])\n\n    useEffect(() => {\n        getTags();\n    }, [])\n\n    useEffect(() => {\n        getMeasurementTypes();\n    }, [])\n\n    const getMeals = () => {\n        Request.get('http://localhost:8080/meal')\n            .then(mealData => setMeals(mealData));\n    }\n\n    const getTags = () => {\n        Request.get('http://localhost:8080/tags')\n            .then(tagData => setTags(tagData));\n    }\n\n    const getMeasurementTypes = () => {\n        Request.get('http://localhost:8080/measurements')\n            .then(measurementData => setMeasurementTypes(measurementData));\n    }\n\n\n    // handle form events\n    const handleChange = (event) => {\n        let propertyName = event.target.name;\n        let copiedRecipe = { ...recipe }\n        copiedRecipe[propertyName] = event.target.value;\n        setRecipe(copiedRecipe)\n    }\n\n    const handleMeal = function (event) {\n        const index = parseInt(event.target.value)\n        const selectedMeal = meals[index]\n        let copiedRecipe = { ...recipe };\n        copiedRecipe['meal'] = selectedMeal\n        setRecipe(copiedRecipe)\n    }\n\n    const handleTags = function (event) {\n        const index = parseInt(event.target.value)\n        const selectedTag = tags[index]\n        let copiedRecipe = { ...recipe };\n        copiedRecipe['tags'] = [];\n        copiedRecipe['tags'].push(selectedTag);\n        setRecipe(copiedRecipe)\n    }\n\n    const handleInstructions = (event) => {\n        let copiedRecipe = { ...recipe }\n        copiedRecipe['instructions'] = [];\n        copiedRecipe['instructions'].push(event.target.value);\n        setRecipe(copiedRecipe)\n    }\n\n    // submitting prepared ingredients\n    // const handlePreparedIngredientChange = (index, event) => {\n    //     let data = [...ingredientFormValues];\n    //     data[index][event.target.name] = event.target.value\n    //     setPreparedIngredient(data);\n\n    //     const copiedList = preparedIngredientsList;\n    //     copiedList[index] = data;\n    //     setPreparedIngredientsList(copiedList);\n    // }\n\n    // const handleIngredients = function (index, event) {\n    //     const i = parseInt(event.target.value)\n    //     const selectedIngredient = ingredients[i]\n\n    //     let data = [...ingredientFormValues];\n    //     data[index][event.target.name] = selectedIngredient\n    //     setPreparedIngredient(data)\n\n    //     const copiedList = preparedIngredientsList;\n    //     copiedList[index] = data;\n    //     setPreparedIngredientsList(copiedList);\n    // }\n\n    // const handleMeasurementType = function (index, event) {\n    //     const i = parseInt(event.target.value)\n    //     const selectedType = measurementTypes[i]\n\n    //     let data = [...ingredientFormValues];\n    //     data[index][event.target.name] = selectedType\n    //     setPreparedIngredient(data)\n\n    //     const copiedList = preparedIngredientsList;\n    //     copiedList[index] = data;\n    //     setPreparedIngredientsList(copiedList);\n    // }\n\n    // const handleAllPreparedIngredientsSubmit = function (event) {\n    //     event.preventDefault();\n\n    //     // let copiedRecipe = { ...recipe };\n    //     // copiedRecipe['prepared_ingredients'] = [];\n    //     ingredientFormValues.forEach((element) => {\n    //         // copiedRecipe.prepared_ingredients.push(element);\n    //         onPreparedIngredient(element);\n    //     })\n\n    //     // getPreparedIngredients();\n    //     // copiedRecipe.prepared_ingredients = preparedIngredientsList;\n    //     // setRecipe(copiedRecipe);\n    // }\n\n        const handleIngredientSelect = function (index, event) {\n        const i = parseInt(event.target.value)\n        const selectedIngredient = ingredients[i]\n\n        let data = [...ingredientFormValues];\n        data[index][event.target.name] = selectedIngredient\n        setIngredient(data)\n\n        const copiedList = ingredientList;\n        copiedList[index] = data;\n        setIngredientList(copiedList);\n    }\n\n    const handleIngredientsSubmit = function (event) {\n        event.preventDefault();\n\n        let copiedRecipe = { ...recipe };\n        copiedRecipe['ingredients'] = [];\n        ingredientList.forEach((element) => {\n            copiedRecipe.ingredients.push(element)\n        })\n        // copiedRecipe.ingredients = ingredientList;\n        setRecipe(copiedRecipe);\n\n        console.log(recipe);\n    }\n\n    // add more ingredients\n    const addAnotherIngredient = function () {\n        setIngredientFormValues([...ingredientFormValues, {}])\n    }\n\n    // create recipe\n    const handleSubmit = function (event) {\n        event.preventDefault();\n\n        // onUpdate(recipe, id);\n        onCreate(recipe);\n\n        console.log(recipe);\n    }\n\n    const createRecipe = function (event) {\n        event.preventDefault();\n        // onCreate(recipe);\n\n        // setToggleButton(true);\n    }\n\n    const mealOptions = meals.map((meal, index) => {\n        return <option key={index} value={index}>{meal}</option>\n    })\n\n    const tagsOptions = tags.map((tag, index) => {\n        return <option key={index} value={index}>{tag}</option>\n    })\n\n    const ingredientsOptions = ingredients.map((ingredient, index) => {\n        return <option key={index} value={index}>{ingredient.name}</option>\n    })\n\n    const measurementTypeOptions = measurementTypes.map((measurement_type, index) => {\n        return <option key={index} value={index}>{measurement_type}</option>\n    })\n\n\n\n    return (\n        <div className=\"recipe-form\">\n            {/* <form onSubmit={handleSubmit}> */}\n                <input type=\"text\" placeholder=\"Recipe name\" name=\"name\" onChange={handleChange} defaultValue={recipe.name} />\n                <select name=\"type\" onChange={handleMeal} defaultValue=\"select-meal\">\n                    <option disabled value=\"select-meal\">Select a meal</option>\n                    {mealOptions}\n                </select>\n                <input type=\"number\" placeholder=\"Number of portions\" name=\"portions\" onChange={handleChange} defaultValue={recipe.portions} />\n                <input type=\"number\" step=\"0.01\" placeholder=\"Cooking time\" name=\"cooking_time\" onChange={handleChange} defaultValue={recipe.cooking_time} />\n                \n                <button onClick={createRecipe}>Create recipe</button>\n                <br />\n            <br />\n            {/* {toggleButton ?  */}\n            \n            {/* //  {toggleForm ? */}\n                {/* // : null} */}\n\n                <p>Add ingredients:</p>\n                <form onSubmit={handleIngredientsSubmit}>\n                {ingredientFormValues.map((element, index) => {\n                    return (\n                        <div key={index}>\n                            <select name=\"ingredient\" onChange={event => handleIngredientSelect(index, event)} defaultValue={\"select-ingredient\"} >\n                                <option disabled value=\"select-ingredient\">Select an ingredient</option>\n                                {ingredientsOptions}\n                            </select>\n                            {/* <input type=\"number\" step=\"0.01\" placeholder=\"Measurement\" name=\"measurement\" onChange={event => handlePreparedIngredientChange(index, event)} defaultValue={element.measurement} /> */}\n                            {/* <select name=\"measurementType\" onChange={event => handleMeasurementType(index, event)} defaultValue={\"select-measurement-type\"}> */}\n                                {/* <option disabled value=\"select-measurement-type\">Select a measurement type</option> */}\n                                {/* {measurementTypeOptions} */}\n                            {/* </select> */}\n                            {/* <input type=\"text\" placeholder=\"Preparation\" name=\"preparation\" onChange={event => handlePreparedIngredientChange(index, event)} defaultValue={element.preparation} /> */}\n                            <br />\n                        </div>)\n                })}\n                <button onClick={addAnotherIngredient}>Add another ingredient</button>\n                <br />\n                <button type=\"submit\">Submit ingredients</button>\n                </form>\n\n                {/* TAGS */}\n                <br />\n                <br />\n                <p>Add tag:</p>\n                    <form>\n                <select name=\"tags\" onChange={handleTags} defaultValue=\"select-tag\">\n                    <option disabled value=\"select-tag\">Select a tag</option>\n                    {tagsOptions}\n                </select>\n\n                {/* INSTRUCTIONS */}\n                <br />\n                <br />\n                <p>Add instruction:</p>\n                <input type=\"text\" placeholder=\"Instructions\" name=\"instructions\" onChange={handleInstructions} defaultValue={recipe.instructions} />\n                </form>\n\n                <br />\n                <br />\n            \n                <button onClick={handleSubmit}>Create Recipe</button>\n            {/* </form> */}\n\n        </div>\n    )\n}\n\nexport default RecipeForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}