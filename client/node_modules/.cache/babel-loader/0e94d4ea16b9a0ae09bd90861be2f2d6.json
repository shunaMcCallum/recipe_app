{"ast":null,"code":"var _jsxFileName = \"/Users/codeclan_student/Desktop/practice_projects/recipe_app/client/src/containers/RecipeSection/CreateRecipe/RecipeForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Request from '../../../helpers/request';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecipeForm = _ref => {\n  _s();\n\n  let {\n    onCreate,\n    onPreparedIngredient,\n    ingredients\n  } = _ref;\n  const [meals, setMeals] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [measurementTypes, setMeasurementTypes] = useState([]);\n  const [recipe, setRecipe] = useState({});\n  const [preparedIngredient, setPreparedIngredient] = useState({});\n  const [preparedIngredientsList, setPreparedIngredientsList] = useState([]);\n  const [ingredientFormValues, setIngredientFormValues] = useState([{\n    ingredient: \"\",\n    measurement: 0.0,\n    measurementType: \"\",\n    preparation: \"\"\n  }]); // fetch eNums from backend\n\n  useEffect(() => {\n    getMeals();\n  }, []);\n  useEffect(() => {\n    getTags();\n  }, []);\n  useEffect(() => {\n    getMeasurementTypes();\n  }, []);\n\n  const getMeals = () => {\n    Request.get('http://localhost:8080/meal').then(mealData => setMeals(mealData));\n  };\n\n  const getTags = () => {\n    Request.get('http://localhost:8080/tags').then(tagData => setTags(tagData));\n  };\n\n  const getMeasurementTypes = () => {\n    Request.get('http://localhost:8080/measurements').then(measurementData => setMeasurementTypes(measurementData));\n  }; // handle form events\n\n\n  const handleChange = event => {\n    let propertyName = event.target.name;\n    let copiedRecipe = { ...recipe\n    };\n    copiedRecipe[propertyName] = event.target.value;\n    setRecipe(copiedRecipe);\n  };\n\n  const handleMeal = function (event) {\n    const index = parseInt(event.target.value);\n    const selectedMeal = meals[index];\n    let copiedRecipe = { ...recipe\n    };\n    copiedRecipe['meal'] = selectedMeal;\n    setRecipe(copiedRecipe);\n  };\n\n  const handleTags = function (event) {\n    const index = parseInt(event.target.value);\n    const selectedTag = tags[index];\n    let copiedRecipe = { ...recipe\n    };\n    copiedRecipe['tags'] = selectedTag;\n    setRecipe(copiedRecipe);\n  }; // submitting prepared ingredients\n\n\n  const handlePreparedIngredientChange = (index, event) => {\n    let newIngredientFormValues = [...ingredientFormValues]; // newIngredientFormValues[i][event.target.name] = event.target.value\n    // let propertyName = event.target.name;\n\n    let copiedPreparedIngredient = { ...preparedIngredient\n    };\n    copiedPreparedIngredient[newIngredientFormValues[index][event.target.name]] = event.target.value;\n    setPreparedIngredient(copiedPreparedIngredient);\n  }; // const handleMeasurement = (event) => {\n  //     let propertyName = event.target.name;\n  //     let copiedPreparedIngredient = { ...preparedIngredient };\n  //     copiedPreparedIngredient[propertyName] = parseInt(event.target.value);\n  //     setPreparedIngredient(copiedPreparedIngredient);\n  // }\n\n\n  const handleIngredients = function (index, event) {\n    const i = parseInt(event.target.value);\n    const selectedIngredient = ingredients[i];\n    let newIngredientFormValues = [...ingredientFormValues];\n    let copiedPreparedIngredient = { ...preparedIngredient\n    };\n    copiedPreparedIngredient[newIngredientFormValues[index][event.target.name]] = selectedIngredient;\n    setPreparedIngredient(copiedPreparedIngredient);\n  };\n\n  const handleMeasurementType = function (index, event) {\n    const i = parseInt(event.target.value);\n    const selectedIngredient = ingredients[i];\n    let newIngredientFormValues = [...ingredientFormValues];\n    let copiedPreparedIngredient = { ...preparedIngredient\n    };\n    copiedPreparedIngredient[newIngredientFormValues[index][event.target.name]] = selectedIngredient;\n    setPreparedIngredient(copiedPreparedIngredient);\n  }; // const handlePreparedIngredientSubmit = function (event) {\n  //     event.preventDefault();\n  //     onPreparedIngredient(preparedIngredient);\n  //     preparedIngredientsList.push(preparedIngredient);\n  // }\n\n\n  const handleAllPreparedIngredientsSubmit = function (event) {\n    event.preventDefault(); // let copiedRecipe = { ...recipe };\n    // copiedRecipe['prepared_ingredients'] = preparedIngredientsList;\n    // setRecipe(copiedRecipe);\n\n    ingredientFormValues.forEach((index, element) => {\n      onPreparedIngredient(element);\n      preparedIngredientsList.push(element);\n    });\n    let copiedRecipe = { ...recipe\n    };\n    copiedRecipe['prepared_ingredients'] = preparedIngredientsList;\n    setRecipe(copiedRecipe);\n    console.log(preparedIngredientsList);\n  }; // add more ingredients\n\n\n  const addAnotherIngredient = function () {\n    setIngredientFormValues([...ingredientFormValues, {\n      ingredient: null,\n      measurement: 0.0,\n      measurementType: \"\",\n      preparation: \"\"\n    }]);\n  }; // create recipe\n\n\n  const handleSubmit = function (event) {\n    event.preventDefault();\n    onCreate(recipe);\n  };\n\n  const mealOptions = meals.map((meal, index) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: index,\n      children: meal\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 16\n    }, this);\n  });\n  const tagsOptions = tags.map((tag, index) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: index,\n      children: tag\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 16\n    }, this);\n  });\n  const ingredientsOptions = ingredients.map((ingredient, index) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: index,\n      children: ingredient.name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 16\n    }, this);\n  });\n  const measurementTypeOptions = measurementTypes.map((measurement_type, index) => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: index,\n      children: measurement_type\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recipe-form\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Recipe name\",\n        name: \"name\",\n        onChange: handleChange,\n        defaultValue: recipe.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"type\",\n        onChange: handleMeal,\n        defaultValue: \"select-meal\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          value: \"select-meal\",\n          children: \"Select a meal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), mealOptions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        placeholder: \"Cooking time\",\n        name: \"cooking time\",\n        onChange: handleChange,\n        defaultValue: recipe.cooking_time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), ingredientFormValues.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Add ingredient:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"ingredient\",\n          onChange: event => handleIngredients(index, event),\n          defaultValue: \"select-ingredient\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: true,\n            value: \"select-ingredient\",\n            children: \"Select an ingredient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), ingredientsOptions]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.01\",\n          placeholder: \"Measurement\",\n          name: \"measurement\",\n          onChange: event => handlePreparedIngredientChange(index, event),\n          defaultValue: element.measurement || 0.0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"measurementType\",\n          onChange: event => handleMeasurementType(index, event),\n          defaultValue: \"select-measurement-type\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: true,\n            value: \"select-measurement-type\",\n            children: \"Select a measurement type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this), measurementTypeOptions]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Preparation\",\n          name: \"preparation\",\n          onChange: event => handlePreparedIngredientChange(index, event),\n          defaultValue: element.preparation || \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addAnotherIngredient,\n          children: \"Add another ingredient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAllPreparedIngredientsSubmit,\n          children: \"Submit ingredients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Add tag:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"tags\",\n        onChange: handleTags,\n        defaultValue: \"select-tag\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          value: \"select-tag\",\n          children: \"Select a tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), tagsOptions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Add instruction:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Instructions\",\n        name: \"instructions\",\n        onChange: handleChange,\n        defaultValue: recipe.instructions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Recipe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RecipeForm, \"K+3Uk+04ejXe/z0HO3hwmMy1n2U=\");\n\n_c = RecipeForm;\nexport default RecipeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeForm\");","map":{"version":3,"names":["React","useEffect","useState","Request","RecipeForm","onCreate","onPreparedIngredient","ingredients","meals","setMeals","tags","setTags","measurementTypes","setMeasurementTypes","recipe","setRecipe","preparedIngredient","setPreparedIngredient","preparedIngredientsList","setPreparedIngredientsList","ingredientFormValues","setIngredientFormValues","ingredient","measurement","measurementType","preparation","getMeals","getTags","getMeasurementTypes","get","then","mealData","tagData","measurementData","handleChange","event","propertyName","target","name","copiedRecipe","value","handleMeal","index","parseInt","selectedMeal","handleTags","selectedTag","handlePreparedIngredientChange","newIngredientFormValues","copiedPreparedIngredient","handleIngredients","i","selectedIngredient","handleMeasurementType","handleAllPreparedIngredientsSubmit","preventDefault","forEach","element","push","console","log","addAnotherIngredient","handleSubmit","mealOptions","map","meal","tagsOptions","tag","ingredientsOptions","measurementTypeOptions","measurement_type","cooking_time","instructions"],"sources":["/Users/codeclan_student/Desktop/practice_projects/recipe_app/client/src/containers/RecipeSection/CreateRecipe/RecipeForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Request from '../../../helpers/request';\n\nconst RecipeForm = ({ onCreate, onPreparedIngredient, ingredients }) => {\n\n    const [meals, setMeals] = useState([]);\n    const [tags, setTags] = useState([]);\n    const [measurementTypes, setMeasurementTypes] = useState([]);\n\n    const [recipe, setRecipe] = useState({});\n    const [preparedIngredient, setPreparedIngredient] = useState({});\n    const [preparedIngredientsList, setPreparedIngredientsList] = useState([]);\n\n    const [ingredientFormValues, setIngredientFormValues] = useState([{\n        ingredient: \"\",\n        measurement: 0.0,\n        measurementType: \"\",\n        preparation: \"\"\n    }]);\n\n    // fetch eNums from backend\n    useEffect(() => {\n        getMeals();\n    }, [])\n\n    useEffect(() => {\n        getTags();\n    }, [])\n\n    useEffect(() => {\n        getMeasurementTypes();\n    }, [])\n\n    const getMeals = () => {\n        Request.get('http://localhost:8080/meal')\n            .then(mealData => setMeals(mealData));\n    }\n\n    const getTags = () => {\n        Request.get('http://localhost:8080/tags')\n            .then(tagData => setTags(tagData));\n    }\n\n    const getMeasurementTypes = () => {\n        Request.get('http://localhost:8080/measurements')\n            .then(measurementData => setMeasurementTypes(measurementData));\n    }\n\n\n    // handle form events\n    const handleChange = (event) => {\n        let propertyName = event.target.name;\n        let copiedRecipe = { ...recipe }\n        copiedRecipe[propertyName] = event.target.value;\n        setRecipe(copiedRecipe)\n    }\n\n    const handleMeal = function (event) {\n        const index = parseInt(event.target.value)\n        const selectedMeal = meals[index]\n        let copiedRecipe = { ...recipe };\n        copiedRecipe['meal'] = selectedMeal\n        setRecipe(copiedRecipe)\n    }\n\n    const handleTags = function (event) {\n        const index = parseInt(event.target.value)\n        const selectedTag = tags[index]\n        let copiedRecipe = { ...recipe };\n        copiedRecipe['tags'] = selectedTag\n        setRecipe(copiedRecipe)\n    }\n\n    // submitting prepared ingredients\n    const handlePreparedIngredientChange = (index, event) => {\n        let newIngredientFormValues = [...ingredientFormValues];\n        // newIngredientFormValues[i][event.target.name] = event.target.value\n        // let propertyName = event.target.name;\n        let copiedPreparedIngredient = { ...preparedIngredient };\n        copiedPreparedIngredient[newIngredientFormValues[index][event.target.name]] = event.target.value;\n        setPreparedIngredient(copiedPreparedIngredient);\n    }\n\n    // const handleMeasurement = (event) => {\n    //     let propertyName = event.target.name;\n    //     let copiedPreparedIngredient = { ...preparedIngredient };\n    //     copiedPreparedIngredient[propertyName] = parseInt(event.target.value);\n    //     setPreparedIngredient(copiedPreparedIngredient);\n    // }\n\n    const handleIngredients = function (index, event) {\n        const i = parseInt(event.target.value)\n        const selectedIngredient = ingredients[i]\n\n        let newIngredientFormValues = [...ingredientFormValues];\n        let copiedPreparedIngredient = { ...preparedIngredient };\n        copiedPreparedIngredient[newIngredientFormValues[index][event.target.name]] = selectedIngredient\n        setPreparedIngredient(copiedPreparedIngredient)\n    }\n\n    const handleMeasurementType = function (index, event) {\n        const i = parseInt(event.target.value)\n        const selectedIngredient = ingredients[i]\n\n        let newIngredientFormValues = [...ingredientFormValues];\n        let copiedPreparedIngredient = { ...preparedIngredient };\n        copiedPreparedIngredient[newIngredientFormValues[index][event.target.name]] = selectedIngredient\n        setPreparedIngredient(copiedPreparedIngredient)\n    }\n\n    // const handlePreparedIngredientSubmit = function (event) {\n    //     event.preventDefault();\n    //     onPreparedIngredient(preparedIngredient);\n    //     preparedIngredientsList.push(preparedIngredient);\n    // }\n\n    const handleAllPreparedIngredientsSubmit = function (event) {\n        event.preventDefault();\n        // let copiedRecipe = { ...recipe };\n        // copiedRecipe['prepared_ingredients'] = preparedIngredientsList;\n        // setRecipe(copiedRecipe);\n\n        ingredientFormValues.forEach((index, element) => {\n            onPreparedIngredient(element);\n            preparedIngredientsList.push(element);\n        })\n\n        let copiedRecipe = { ...recipe };\n        copiedRecipe['prepared_ingredients'] = preparedIngredientsList;\n        setRecipe(copiedRecipe);\n\n        console.log(preparedIngredientsList);\n\n    }\n\n    // add more ingredients\n    const addAnotherIngredient = function () {\n        setIngredientFormValues([...ingredientFormValues, {\n            ingredient: null,\n            measurement: 0.0,\n            measurementType: \"\",\n            preparation: \"\"\n        }])\n    }\n\n\n    // create recipe\n    const handleSubmit = function (event) {\n        event.preventDefault();\n        onCreate(recipe);\n    }\n\n\n    const mealOptions = meals.map((meal, index) => {\n        return <option key={index} value={index}>{meal}</option>\n    })\n\n    const tagsOptions = tags.map((tag, index) => {\n        return <option key={index} value={index}>{tag}</option>\n    })\n\n    const ingredientsOptions = ingredients.map((ingredient, index) => {\n        return <option key={index} value={index}>{ingredient.name}</option>\n    })\n\n    const measurementTypeOptions = measurementTypes.map((measurement_type, index) => {\n        return <option key={index} value={index}>{measurement_type}</option>\n    })\n\n\n\n    return (\n        <div className=\"recipe-form\">\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Recipe name\" name=\"name\" onChange={handleChange} defaultValue={recipe.name} />\n                <select name=\"type\" onChange={handleMeal} defaultValue=\"select-meal\">\n                    <option disabled value=\"select-meal\">Select a meal</option>\n                    {mealOptions}\n                </select>\n                {/* <input type=\"number\" placeholder=\"Number of portions\" name=\"portions\" onChange={handleChange} defaultValue={recipe.portions} /> */}\n                <input type=\"number\" step=\"0.01\" placeholder=\"Cooking time\" name=\"cooking time\" onChange={handleChange} defaultValue={recipe.cooking_time} />\n                \n                <br />\n                <br />\n\n            {/* PREPARED INGREDIENTS */}\n            {/* {ingredientToggle ? */}\n                {/* <form> */}\n                    {/* <p>Add ingredient:</p> */}\n                    {/* <select name=\"ingredient\" onChange={handleIngredients} defaultValue=\"select-ingredient\"> */}\n                        {/* <option disabled value=\"select-ingredient\">Select an ingredient</option> */}\n                        {/* {ingredientsOptions} */}\n                    {/* </select> */}\n                    {/* <input type=\"number\" step=\"0.01\" placeholder=\"Measurement\" name=\"measurement\" onChange={handlePreparedIngredientChange} defaultValue={preparedIngredient.measurement} /> */}\n                    {/* <select name=\"measurementType\" onChange={handleMeasurementType} defaultValue=\"select-measurement-type\"> */}\n                        {/* <option disabled value=\"select-measurement-type\">Select a measurement type</option> */}\n                        {/* {measurementTypeOptions} */}\n                    {/* </select> */}\n                    {/* <input type=\"text\" placeholder=\"Preparation\" name=\"preparation\" onChange={handlePreparedIngredientChange} defaultValue={preparedIngredient.preparation} /> */}\n                    {/* <button onClick={handlePreparedIngredientSubmit}>Save ingredient</button> */}\n                    {/* <br /> */}\n                    {/* <button onClick={addAnotherIngredient}>Add another ingredient</button> */}\n                    {/* <br /> */}\n                    {/* <button onClick={handleAllPreparedIngredientsSubmit}>Submit ingredients</button> */}\n                {/* </form> */}\n            {/* : <></>} */}\n            \n            {ingredientFormValues.map((element, index) => (\n                <div key={index}>\n                    <p>Add ingredient:</p>\n                    <select name=\"ingredient\" onChange={event => handleIngredients(index, event)} defaultValue={\"select-ingredient\"}>\n                        <option disabled value=\"select-ingredient\">Select an ingredient</option>\n                        {ingredientsOptions}\n                    </select>\n                    <input type=\"number\" step=\"0.01\" placeholder=\"Measurement\" name=\"measurement\" onChange={event => handlePreparedIngredientChange(index, event)} defaultValue={element.measurement || 0.0} />\n                    <select name=\"measurementType\" onChange={event => handleMeasurementType(index, event)} defaultValue={\"select-measurement-type\"}>\n                        <option disabled value=\"select-measurement-type\">Select a measurement type</option>\n                        {measurementTypeOptions}\n                    </select>\n                    <input type=\"text\" placeholder=\"Preparation\" name=\"preparation\" onChange={event => handlePreparedIngredientChange(index, event)} defaultValue={element.preparation || \"\"} />\n                    <br />\n\n                    <button onClick={addAnotherIngredient}>Add another ingredient</button>\n                    <br />\n                    <button onClick={handleAllPreparedIngredientsSubmit}>Submit ingredients</button>\n                </div>\n            ))}\n                \n                \n                {/* TAGS */}\n                <br />\n                <br />\n                <p>Add tag:</p>\n                <select name=\"tags\" onChange={handleTags} defaultValue=\"select-tag\">\n                    <option disabled value=\"select-tag\">Select a tag</option>\n                    {tagsOptions}\n                </select>\n\n                {/* INSTRUCTIONS */}\n                <br />\n                <br />\n                <p>Add instruction:</p>\n                <input type=\"text\" placeholder=\"Instructions\" name=\"instructions\" onChange={handleChange} defaultValue={recipe.instructions} />\n\n                <br />\n                <br />\n            \n                <button type=\"submit\">Create Recipe</button>\n            </form>\n\n        </div>\n    )\n}\n\nexport default RecipeForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}